# -*- coding: utf-8 -*-
from __future__ import print_function


"""
什么是哈希算法：将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法，而原始数据通过映射之后得到的二进制值串就是哈希值。
    1、从哈希值不能反向推导出原始数据（单向哈希算法）
    2、对输入数据非常敏感，哪怕原始数据只修改了一个比特，最后得到的哈希值也大不相同
    3、哈希冲突的概率要很小，对于不同的原始数据，哈希值相同的概率非常小
    4、哈希算法的执行效率要尽量高效，针对较长的文本，也能快速计算出哈希值

哈希算法的应用：
1、安全加密
2、唯一标识
3、数据校验
4、散列函数

针对字典攻击，我们可以引入一个salt，跟用户密码组合在一起，增加密码的复杂度。我们拿组合之后的字符串来做哈希算法加密，将它存储到数据库中，进一步增加破解的难度。

5、负载均衡
如何实现一个会话粘滞（Session sticky）的负载均衡算法？对客户端ip或者Session ID计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。
6、数据分片
MapReduce
可以先对数据进行分片，然后采用多台机器处理的方法，来提高处理速度，借助分片思想，可以突破单机内存、CPU等资源的限制。
7、分布式存储
分布式缓存（缩容、扩容导致缓存数据失效，穿透缓存，直接去请求数据库，这样可能发生雪崩效应，压垮数据库）
一致性哈希算法（借助虚拟的环和虚拟结点）hash(x) mod n
"""




if __name__ == "__main__":
    pass
