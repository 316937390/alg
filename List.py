# -*- coding: utf-8 -*-
from __future__ import print_function


##链表
"""
LRU缓存淘汰算法
通过指针将零散的内存块串联起来使用
单链表、双向链表、循环链表
在链表中插入和删除操作非常快速，只需要考虑相邻结点的指针改变，因此对应的时间复杂度为O(1)
在链表中随机访问的性能差，需要O(n)的时间复杂度
循环链表特别适用于数据具有环形结构特点的场景，比如约瑟夫问题
双向链表，在实际开发中更加常用，可以支持O(1)时间复杂度的情况下找到前驱结点
删除操作：删除值等于某个给定值的结点；删除给定指针指向的结点；
插入操作：在某个指定结点前面插入
双向循环链表
空间换时间、时间换空间
"""
